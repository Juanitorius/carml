@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix rml: <http://semweb.mmlab.be/ns/rml#>.
@prefix ex: <http://faulty.termType.example.com/>.
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .


####################################################################################
# Wrong termType SubjectMap
####################################################################################
<#FaultyTermTypeMappingA> a rr:TriplesMap;
	rml:logicalSource [
    	rml:source "simpleTestInput.json";
    	rml:referenceFormulation ql:JSONPath;
    	rml:iterator "$" ;
  	];
  	
  	rr:subjectMap [
    	rr:template "http://faulty.termType.example.com/Child/{first}";
    	rr:class ex:FirstName;
    	rr:termType rr:Literal ;
  	];
  	
	rr:predicateObjectMap [
		rr:predicate ex:hasParents ;
		rr:objectMap [
			rml:reference "parents"
		]
	].
	

	
####################################################################################
# Wrong termType GraphMap Literal
####################################################################################
<#FaultyTermTypeMappingB> a rr:TriplesMap;
	rml:logicalSource [
    	rml:source "simpleTestInput.json";
    	rml:referenceFormulation ql:JSONPath;
    	rml:iterator "$"
  	];
  	
  	rr:subjectMap [
    	rr:template "http://faulty.termType.example.com/Child/{first}";
    	rr:class ex:FirstName;
    	rr:graphMap [
    		rr:constant ex:graphMap;
    		rr:termType rr:Literal
    	]
  	];
  	
	rr:predicateObjectMap [
		rr:predicate ex:hasParents ;
		rr:objectMap [
			rml:reference "parents"
		]
	].
	
	
	
	
	
####################################################################################
# Wrong termType GraphMap BlankNode
####################################################################################
<#FaultyTermTypeMappingC> a rr:TriplesMap;
	rml:logicalSource [
    	rml:source "simpleTestInput.json";
    	rml:referenceFormulation ql:JSONPath;
    	rml:iterator "$"
  	];
  	
  	rr:subjectMap [
    	rr:template "http://faulty.termType.example.com/Child/{first}";
    	rr:class ex:FirstName;
    	rr:graphMap [
    		rr:constant ex:graphMap;
    		rr:termType rr:BlankNode ;
    	]
  	];
  	
	rr:predicateObjectMap [
		rr:predicate ex:hasParents ;
		rr:objectMap [
			rml:reference "parents"
		]
	].
	
	
	
####################################################################################
# Wrong termType predicateMap Literal
####################################################################################
<#FaultyTermTypeMappingD> a rr:TriplesMap;
	rml:logicalSource [
    	rml:source "simpleTestInput.json";
    	rml:referenceFormulation ql:JSONPath;
    	rml:iterator "$"
  	];
  	
  	rr:subjectMap [
    	rr:template "http://faulty.termType.example.com/Child/{first}";
    	rr:class ex:FirstName;
  	];
  	
	rr:predicateObjectMap [
		rr:predicateMap [
			rr:constant ex:hasParents;
			rr:termType rr:Literal
		];
		rr:objectMap [
			rml:reference "parents" ;
		] ;
	].
	

	
	
####################################################################################
# Wrong termType predicateMap BlankNode
####################################################################################
<#FaultyTermTypeMappingE> a rr:TriplesMap;
	rml:logicalSource [
    	rml:source "simpleTestInput.json";
    	rml:referenceFormulation ql:JSONPath;
    	rml:iterator "$"
  	];
  	
  	rr:subjectMap [
    	rr:template "http://faulty.termType.example.com/Child/{first}";
    	rr:class ex:FirstName;
  	];
  	
	rr:predicateObjectMap [
		rr:predicateMap [
			rr:constant ex:hasParents;
			rr:termType rr:BlankNode
		];
		rr:objectMap [
			rml:reference "parents" ;
		]
	].
	
	
	

####################################################################################
# Wrong termType predicateMap BlankNode
####################################################################################
<#FaultyTermTypeMappingF> a rr:TriplesMap;
	rml:logicalSource [
    	rml:source "simpleTestInput.json";
    	rml:referenceFormulation ql:JSONPath;
    	rml:iterator "$"
  	];
  	
  	rr:subjectMap [
    	rr:template "http://faulty.termType.example.com/Child/{first}";
    	rr:class ex:FirstName;
  	];
  	
	rr:predicateObjectMap [
		rr:predicateMap [
			rr:constant ex:hasParents;
			rr:termType rr:BlankNode
		];
		rr:objectMap [
			rml:reference "parents"
		]
	].


####################################################################################
# Does not have a termType property and it is not a Literal
# If the term map does not have a rr:termType property, then its term type is:
#
#    rr:Literal, if it is an object map and at least one of the following conditions is true:
#        It is a reference-based term map.
#        It has a rml:referenceFormulation property (and thus a specified language tag).
#        It has a rr:datatype property (and thus a specified datatype).
#    rr:IRI, otherwise.
#
####################################################################################
<#FaultyTermTypeMappingG> a rr:TriplesMap;
	rml:logicalSource [
    	rml:source "simpleTestInput.json";
    	rml:referenceFormulation ql:JSONPath;
    	rml:iterator "$"
  	];
  	
  	rr:subjectMap [
    	rr:template "http://faulty.termType.example.com/Child/{first}";
    	rr:class ex:FirstName;
  	];
  	
	rr:predicateObjectMap [
		rr:predicateMap [
			rr:constant ex:hasParents;
			rr:termType rr:BlankNode
		];
#		rr:objectMap [
#			 rr:constant ; # what was the intention here?
#		] ;
	] ;
	.
	
	
