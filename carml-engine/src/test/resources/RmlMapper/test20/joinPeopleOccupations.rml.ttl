@prefix ex: <http://www.example.com/>.
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix carml: <http://carml.taxonic.com/carml/> .
@prefix : <http://www.example.com/mapping/> .
@prefix ppl: <http://www.example.com/ppl/> .

:people
  rml:logicalSource [
    rml:source "peopleOccupations.json" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.people[*]" ;
  ];
  rr:subjectMap [
    rr:template "http://www.example.com/person/{name}" ;
    rr:class ppl:Person ;
  ];
.

# this join should fail, because the second join condition's child
# expression refers to a non-existing property
:people
  rr:predicateObjectMap [
    rr:predicate ppl:occupation ;
    rr:objectMap [
      rr:parentTriplesMap :occupations;
      rr:joinCondition [
        rr:parent "code";
        rr:child "occupationCode";
      ], [
        rr:parent "taxCode";
        rr:child "taxCode.nonExistingProperty";
      ];
    ];
  ];
.

:occupations
  rml:logicalSource [
    rml:source "peopleOccupations.json" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.occupations[*]" ;
  ];
  rr:subjectMap [
    rr:template "http://www.example.com/occupation/{code}" ;
    rr:class ppl:Occupation ;
  ];
  rr:predicateObjectMap [
    rr:predicate rdfs:label ;
    rr:objectMap [
      rml:reference "label";
    ]
  ];
.
